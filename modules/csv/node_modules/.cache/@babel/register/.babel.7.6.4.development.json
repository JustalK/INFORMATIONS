{
  "{\"sourceRoot\":\"/home/rumarocket/eclipse-workspace/Informations/modules/csv/test\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"/home/rumarocket/eclipse-workspace/Informations/modules/csv\",\"filename\":\"/home/rumarocket/eclipse-workspace/Informations/modules/csv/test/tests.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/home/rumarocket/eclipse-workspace/Informations/modules/csv\",\"plugins\":[],\"presets\":[]}:7.6.4": {
    "metadata": {},
    "options": {
      "sourceRoot": "/home/rumarocket/eclipse-workspace/Informations/modules/csv/test",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "/home/rumarocket/eclipse-workspace/Informations/modules/csv",
      "filename": "/home/rumarocket/eclipse-workspace/Informations/modules/csv/test/tests.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/home/rumarocket/eclipse-workspace/Informations/modules/csv",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/home/rumarocket/eclipse-workspace/Informations/modules/csv/test/tests.js",
        "plugins": []
      },
      "generatorOpts": {
        "filename": "/home/rumarocket/eclipse-workspace/Informations/modules/csv/test/tests.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/home/rumarocket/eclipse-workspace/Informations/modules/csv/test",
        "sourceFileName": "tests.js"
      }
    },
    "ast": null,
    "code": "const {\n  expect\n} = require('chai');\n\nconst {\n  getLegend,\n  getData\n} = require('./../index.js');\n\ndescribe('getLegend function', () => {\n  it('test to grab the legends of a csv', async function () {\n    let file = {\n      \"path\": \"./test/test.csv\"\n    };\n    let legends = await getLegend(file);\n    expect(legends).to.eql(['column1', 'column2', 'column3', 'column4', 'column5']);\n  });\n});\ndescribe('getData function', () => {\n  it('test to grab the data of a csv', async function () {\n    let file = {\n      \"path\": \"./test/test.csv\"\n    };\n    let legends = await getLegend(file);\n    let data = await getData(file, legends, true);\n    expect(data.length).to.eql(3);\n    expect(data[1].column4).to.eql(\"2\");\n    expect(data[0].column1).to.eql(\"kevin1\");\n  });\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3RzLmpzIl0sIm5hbWVzIjpbImV4cGVjdCIsInJlcXVpcmUiLCJnZXRMZWdlbmQiLCJnZXREYXRhIiwiZGVzY3JpYmUiLCJpdCIsImZpbGUiLCJsZWdlbmRzIiwidG8iLCJlcWwiLCJkYXRhIiwibGVuZ3RoIiwiY29sdW1uNCIsImNvbHVtbjEiXSwibWFwcGluZ3MiOiJBQUFBLE1BQU07QUFBRUEsRUFBQUE7QUFBRixJQUFhQyxPQUFPLENBQUMsTUFBRCxDQUExQjs7QUFDQSxNQUFNO0FBQUVDLEVBQUFBLFNBQUY7QUFBYUMsRUFBQUE7QUFBYixJQUF5QkYsT0FBTyxDQUFDLGVBQUQsQ0FBdEM7O0FBRUFHLFFBQVEsQ0FBQyxvQkFBRCxFQUF1QixNQUFNO0FBQ3BDQyxFQUFBQSxFQUFFLENBQUMsbUNBQUQsRUFBc0Msa0JBQWlCO0FBQ3hELFFBQUlDLElBQUksR0FBRztBQUFDLGNBQVM7QUFBVixLQUFYO0FBQ0EsUUFBSUMsT0FBTyxHQUFHLE1BQU1MLFNBQVMsQ0FBQ0ksSUFBRCxDQUE3QjtBQUNBTixJQUFBQSxNQUFNLENBQUNPLE9BQUQsQ0FBTixDQUFnQkMsRUFBaEIsQ0FBbUJDLEdBQW5CLENBQXVCLENBQUUsU0FBRixFQUFhLFNBQWIsRUFBd0IsU0FBeEIsRUFBbUMsU0FBbkMsRUFBOEMsU0FBOUMsQ0FBdkI7QUFDQSxHQUpDLENBQUY7QUFLQSxDQU5PLENBQVI7QUFRQUwsUUFBUSxDQUFDLGtCQUFELEVBQXFCLE1BQU07QUFDbENDLEVBQUFBLEVBQUUsQ0FBQyxnQ0FBRCxFQUFtQyxrQkFBaUI7QUFDckQsUUFBSUMsSUFBSSxHQUFHO0FBQUMsY0FBUztBQUFWLEtBQVg7QUFDQSxRQUFJQyxPQUFPLEdBQUcsTUFBTUwsU0FBUyxDQUFDSSxJQUFELENBQTdCO0FBQ0EsUUFBSUksSUFBSSxHQUFHLE1BQU1QLE9BQU8sQ0FBQ0csSUFBRCxFQUFNQyxPQUFOLEVBQWMsSUFBZCxDQUF4QjtBQUNBUCxJQUFBQSxNQUFNLENBQUNVLElBQUksQ0FBQ0MsTUFBTixDQUFOLENBQW9CSCxFQUFwQixDQUF1QkMsR0FBdkIsQ0FBMkIsQ0FBM0I7QUFDQVQsSUFBQUEsTUFBTSxDQUFDVSxJQUFJLENBQUMsQ0FBRCxDQUFKLENBQVFFLE9BQVQsQ0FBTixDQUF3QkosRUFBeEIsQ0FBMkJDLEdBQTNCLENBQStCLEdBQS9CO0FBQ0FULElBQUFBLE1BQU0sQ0FBQ1UsSUFBSSxDQUFDLENBQUQsQ0FBSixDQUFRRyxPQUFULENBQU4sQ0FBd0JMLEVBQXhCLENBQTJCQyxHQUEzQixDQUErQixRQUEvQjtBQUNBLEdBUEMsQ0FBRjtBQVFBLENBVE8sQ0FBUiIsInNvdXJjZVJvb3QiOiIvaG9tZS9ydW1hcm9ja2V0L2VjbGlwc2Utd29ya3NwYWNlL0luZm9ybWF0aW9ucy9tb2R1bGVzL2Nzdi90ZXN0Iiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgeyBleHBlY3QgfSA9IHJlcXVpcmUoJ2NoYWknKTtcbmNvbnN0IHsgZ2V0TGVnZW5kLCBnZXREYXRhIH0gPSByZXF1aXJlKCcuLy4uL2luZGV4LmpzJyk7XG5cbmRlc2NyaWJlKCdnZXRMZWdlbmQgZnVuY3Rpb24nLCAoKSA9PiB7XG5cdGl0KCd0ZXN0IHRvIGdyYWIgdGhlIGxlZ2VuZHMgb2YgYSBjc3YnLCBhc3luYyBmdW5jdGlvbigpIHtcblx0XHRsZXQgZmlsZSA9IHtcInBhdGhcIiA6IFwiLi90ZXN0L3Rlc3QuY3N2XCJ9XG5cdFx0bGV0IGxlZ2VuZHMgPSBhd2FpdCBnZXRMZWdlbmQoZmlsZSk7XG5cdFx0ZXhwZWN0KGxlZ2VuZHMpLnRvLmVxbChbICdjb2x1bW4xJywgJ2NvbHVtbjInLCAnY29sdW1uMycsICdjb2x1bW40JywgJ2NvbHVtbjUnIF0pO1xuXHR9KTtcbn0pO1xuXG5kZXNjcmliZSgnZ2V0RGF0YSBmdW5jdGlvbicsICgpID0+IHtcblx0aXQoJ3Rlc3QgdG8gZ3JhYiB0aGUgZGF0YSBvZiBhIGNzdicsIGFzeW5jIGZ1bmN0aW9uKCkge1xuXHRcdGxldCBmaWxlID0ge1wicGF0aFwiIDogXCIuL3Rlc3QvdGVzdC5jc3ZcIn1cblx0XHRsZXQgbGVnZW5kcyA9IGF3YWl0IGdldExlZ2VuZChmaWxlKTtcblx0XHRsZXQgZGF0YSA9IGF3YWl0IGdldERhdGEoZmlsZSxsZWdlbmRzLHRydWUpO1xuXHRcdGV4cGVjdChkYXRhLmxlbmd0aCkudG8uZXFsKDMpO1xuXHRcdGV4cGVjdChkYXRhWzFdLmNvbHVtbjQpLnRvLmVxbChcIjJcIik7XG5cdFx0ZXhwZWN0KGRhdGFbMF0uY29sdW1uMSkudG8uZXFsKFwia2V2aW4xXCIpO1xuXHR9KTtcbn0pO1xuIl19",
    "map": {
      "version": 3,
      "sources": [
        "tests.js"
      ],
      "names": [
        "expect",
        "require",
        "getLegend",
        "getData",
        "describe",
        "it",
        "file",
        "legends",
        "to",
        "eql",
        "data",
        "length",
        "column4",
        "column1"
      ],
      "mappings": "AAAA,MAAM;AAAEA,EAAAA;AAAF,IAAaC,OAAO,CAAC,MAAD,CAA1B;;AACA,MAAM;AAAEC,EAAAA,SAAF;AAAaC,EAAAA;AAAb,IAAyBF,OAAO,CAAC,eAAD,CAAtC;;AAEAG,QAAQ,CAAC,oBAAD,EAAuB,MAAM;AACpCC,EAAAA,EAAE,CAAC,mCAAD,EAAsC,kBAAiB;AACxD,QAAIC,IAAI,GAAG;AAAC,cAAS;AAAV,KAAX;AACA,QAAIC,OAAO,GAAG,MAAML,SAAS,CAACI,IAAD,CAA7B;AACAN,IAAAA,MAAM,CAACO,OAAD,CAAN,CAAgBC,EAAhB,CAAmBC,GAAnB,CAAuB,CAAE,SAAF,EAAa,SAAb,EAAwB,SAAxB,EAAmC,SAAnC,EAA8C,SAA9C,CAAvB;AACA,GAJC,CAAF;AAKA,CANO,CAAR;AAQAL,QAAQ,CAAC,kBAAD,EAAqB,MAAM;AAClCC,EAAAA,EAAE,CAAC,gCAAD,EAAmC,kBAAiB;AACrD,QAAIC,IAAI,GAAG;AAAC,cAAS;AAAV,KAAX;AACA,QAAIC,OAAO,GAAG,MAAML,SAAS,CAACI,IAAD,CAA7B;AACA,QAAII,IAAI,GAAG,MAAMP,OAAO,CAACG,IAAD,EAAMC,OAAN,EAAc,IAAd,CAAxB;AACAP,IAAAA,MAAM,CAACU,IAAI,CAACC,MAAN,CAAN,CAAoBH,EAApB,CAAuBC,GAAvB,CAA2B,CAA3B;AACAT,IAAAA,MAAM,CAACU,IAAI,CAAC,CAAD,CAAJ,CAAQE,OAAT,CAAN,CAAwBJ,EAAxB,CAA2BC,GAA3B,CAA+B,GAA/B;AACAT,IAAAA,MAAM,CAACU,IAAI,CAAC,CAAD,CAAJ,CAAQG,OAAT,CAAN,CAAwBL,EAAxB,CAA2BC,GAA3B,CAA+B,QAA/B;AACA,GAPC,CAAF;AAQA,CATO,CAAR",
      "sourceRoot": "/home/rumarocket/eclipse-workspace/Informations/modules/csv/test",
      "sourcesContent": [
        "const { expect } = require('chai');\nconst { getLegend, getData } = require('./../index.js');\n\ndescribe('getLegend function', () => {\n\tit('test to grab the legends of a csv', async function() {\n\t\tlet file = {\"path\" : \"./test/test.csv\"}\n\t\tlet legends = await getLegend(file);\n\t\texpect(legends).to.eql([ 'column1', 'column2', 'column3', 'column4', 'column5' ]);\n\t});\n});\n\ndescribe('getData function', () => {\n\tit('test to grab the data of a csv', async function() {\n\t\tlet file = {\"path\" : \"./test/test.csv\"}\n\t\tlet legends = await getLegend(file);\n\t\tlet data = await getData(file,legends,true);\n\t\texpect(data.length).to.eql(3);\n\t\texpect(data[1].column4).to.eql(\"2\");\n\t\texpect(data[0].column1).to.eql(\"kevin1\");\n\t});\n});\n"
      ]
    },
    "sourceType": "module",
    "mtime": 1572236275901
  },
  "{\"sourceRoot\":\"/home/rumarocket/eclipse-workspace/Informations/modules/csv\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"/home/rumarocket/eclipse-workspace/Informations/modules/csv\",\"filename\":\"/home/rumarocket/eclipse-workspace/Informations/modules/csv/index.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/home/rumarocket/eclipse-workspace/Informations/modules/csv\",\"plugins\":[],\"presets\":[]}:7.6.4": {
    "metadata": {},
    "options": {
      "sourceRoot": "/home/rumarocket/eclipse-workspace/Informations/modules/csv",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "/home/rumarocket/eclipse-workspace/Informations/modules/csv",
      "filename": "/home/rumarocket/eclipse-workspace/Informations/modules/csv/index.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/home/rumarocket/eclipse-workspace/Informations/modules/csv",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/home/rumarocket/eclipse-workspace/Informations/modules/csv/index.js",
        "plugins": []
      },
      "generatorOpts": {
        "filename": "/home/rumarocket/eclipse-workspace/Informations/modules/csv/index.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/home/rumarocket/eclipse-workspace/Informations/modules/csv",
        "sourceFileName": "index.js"
      }
    },
    "ast": null,
    "code": "const fcsv = require(\"fast-csv\");\n/**\n * Get the legend of the csv file\n * @param File file the file with the legend\n * @return Array The array of the first line of the csv\n */\n\n\nconst getLegend = async function (file) {\n  return new Promise((resolve, reject) => {\n    fcsv.parseFile(file.path).on(\"data\", function (lcsv) {\n      resolve(lcsv);\n      this.destroy();\n    });\n  });\n};\n/**\n * Get the data of the csv\n * @param File file the file that we wanna extract the data\n * @param Array legend the legend of the csv, gonna be use for creating the map of the data\n * @param Bolean hasLegend If true, we gonna skip the first line, if else we take everything\n * @return Array The data extract from the csv without or with the legend\n */\n\n\nconst getData = async function (file, legend, hasLegend) {\n  return new Promise((resolve, reject) => {\n    let rsl = [],\n        first = true;\n    fcsv.parseFile(file.path).on(\"data\", function (lcsv) {\n      if (first && hasLegend) {\n        first = false;\n        return;\n      }\n\n      let line = {};\n      lcsv.map((x, i) => line[legend[i]] = x);\n      rsl.push(line);\n    }).on(\"end\", function () {\n      resolve(rsl);\n    });\n  });\n};\n\nmodule.exports = {\n  getLegend,\n  getData\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sIm5hbWVzIjpbImZjc3YiLCJyZXF1aXJlIiwiZ2V0TGVnZW5kIiwiZmlsZSIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwicGFyc2VGaWxlIiwicGF0aCIsIm9uIiwibGNzdiIsImRlc3Ryb3kiLCJnZXREYXRhIiwibGVnZW5kIiwiaGFzTGVnZW5kIiwicnNsIiwiZmlyc3QiLCJsaW5lIiwibWFwIiwieCIsImkiLCJwdXNoIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTUEsSUFBSSxHQUFHQyxPQUFPLENBQUMsVUFBRCxDQUFwQjtBQUVBOzs7Ozs7O0FBS0EsTUFBTUMsU0FBUyxHQUFHLGdCQUFnQkMsSUFBaEIsRUFBc0I7QUFDdkMsU0FBTyxJQUFJQyxPQUFKLENBQVksQ0FBQ0MsT0FBRCxFQUFVQyxNQUFWLEtBQXFCO0FBQ3ZDTixJQUFBQSxJQUFJLENBQUNPLFNBQUwsQ0FBZUosSUFBSSxDQUFDSyxJQUFwQixFQUNDQyxFQURELENBQ0ksTUFESixFQUNZLFVBQVNDLElBQVQsRUFBZTtBQUMxQkwsTUFBQUEsT0FBTyxDQUFDSyxJQUFELENBQVA7QUFDQSxXQUFLQyxPQUFMO0FBQ0EsS0FKRDtBQUtBLEdBTk0sQ0FBUDtBQU9BLENBUkQ7QUFVQTs7Ozs7Ozs7O0FBT0EsTUFBTUMsT0FBTyxHQUFHLGdCQUFnQlQsSUFBaEIsRUFBcUJVLE1BQXJCLEVBQTRCQyxTQUE1QixFQUF1QztBQUN0RCxTQUFPLElBQUlWLE9BQUosQ0FBWSxDQUFDQyxPQUFELEVBQVVDLE1BQVYsS0FBcUI7QUFDdkMsUUFBSVMsR0FBRyxHQUFHLEVBQVY7QUFBQSxRQUFhQyxLQUFLLEdBQUMsSUFBbkI7QUFDQWhCLElBQUFBLElBQUksQ0FBQ08sU0FBTCxDQUFlSixJQUFJLENBQUNLLElBQXBCLEVBQ0NDLEVBREQsQ0FDSSxNQURKLEVBQ1ksVUFBU0MsSUFBVCxFQUFlO0FBQzFCLFVBQUdNLEtBQUssSUFBSUYsU0FBWixFQUF1QjtBQUN0QkUsUUFBQUEsS0FBSyxHQUFDLEtBQU47QUFDQTtBQUNBOztBQUNELFVBQUlDLElBQUksR0FBRyxFQUFYO0FBQ0FQLE1BQUFBLElBQUksQ0FBQ1EsR0FBTCxDQUFTLENBQUNDLENBQUQsRUFBR0MsQ0FBSCxLQUFTSCxJQUFJLENBQUNKLE1BQU0sQ0FBQ08sQ0FBRCxDQUFQLENBQUosR0FBZ0JELENBQWxDO0FBQ0FKLE1BQUFBLEdBQUcsQ0FBQ00sSUFBSixDQUFTSixJQUFUO0FBQ0EsS0FURCxFQVVDUixFQVZELENBVUksS0FWSixFQVVXLFlBQVc7QUFDckJKLE1BQUFBLE9BQU8sQ0FBQ1UsR0FBRCxDQUFQO0FBQ0EsS0FaRDtBQWFBLEdBZk0sQ0FBUDtBQWdCQSxDQWpCRDs7QUFtQkFPLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQjtBQUNoQnJCLEVBQUFBLFNBRGdCO0FBRWhCVSxFQUFBQTtBQUZnQixDQUFqQiIsInNvdXJjZVJvb3QiOiIvaG9tZS9ydW1hcm9ja2V0L2VjbGlwc2Utd29ya3NwYWNlL0luZm9ybWF0aW9ucy9tb2R1bGVzL2NzdiIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGZjc3YgPSByZXF1aXJlKFwiZmFzdC1jc3ZcIik7XG5cbi8qKlxuICogR2V0IHRoZSBsZWdlbmQgb2YgdGhlIGNzdiBmaWxlXG4gKiBAcGFyYW0gRmlsZSBmaWxlIHRoZSBmaWxlIHdpdGggdGhlIGxlZ2VuZFxuICogQHJldHVybiBBcnJheSBUaGUgYXJyYXkgb2YgdGhlIGZpcnN0IGxpbmUgb2YgdGhlIGNzdlxuICovXG5jb25zdCBnZXRMZWdlbmQgPSBhc3luYyBmdW5jdGlvbiAoZmlsZSkge1xuXHRyZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuXHRcdGZjc3YucGFyc2VGaWxlKGZpbGUucGF0aClcblx0XHQub24oXCJkYXRhXCIsIGZ1bmN0aW9uKGxjc3YpIHtcblx0XHRcdHJlc29sdmUobGNzdik7XG5cdFx0XHR0aGlzLmRlc3Ryb3koKTtcblx0XHR9KVxuXHR9KVxufVxuXG4vKipcbiAqIEdldCB0aGUgZGF0YSBvZiB0aGUgY3N2XG4gKiBAcGFyYW0gRmlsZSBmaWxlIHRoZSBmaWxlIHRoYXQgd2Ugd2FubmEgZXh0cmFjdCB0aGUgZGF0YVxuICogQHBhcmFtIEFycmF5IGxlZ2VuZCB0aGUgbGVnZW5kIG9mIHRoZSBjc3YsIGdvbm5hIGJlIHVzZSBmb3IgY3JlYXRpbmcgdGhlIG1hcCBvZiB0aGUgZGF0YVxuICogQHBhcmFtIEJvbGVhbiBoYXNMZWdlbmQgSWYgdHJ1ZSwgd2UgZ29ubmEgc2tpcCB0aGUgZmlyc3QgbGluZSwgaWYgZWxzZSB3ZSB0YWtlIGV2ZXJ5dGhpbmdcbiAqIEByZXR1cm4gQXJyYXkgVGhlIGRhdGEgZXh0cmFjdCBmcm9tIHRoZSBjc3Ygd2l0aG91dCBvciB3aXRoIHRoZSBsZWdlbmRcbiAqL1xuY29uc3QgZ2V0RGF0YSA9IGFzeW5jIGZ1bmN0aW9uIChmaWxlLGxlZ2VuZCxoYXNMZWdlbmQpIHtcblx0cmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcblx0XHRsZXQgcnNsID0gW10sZmlyc3Q9dHJ1ZTtcblx0XHRmY3N2LnBhcnNlRmlsZShmaWxlLnBhdGgpXG5cdFx0Lm9uKFwiZGF0YVwiLCBmdW5jdGlvbihsY3N2KSB7XG5cdFx0XHRpZihmaXJzdCAmJiBoYXNMZWdlbmQpIHtcblx0XHRcdFx0Zmlyc3Q9ZmFsc2Vcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXHRcdFx0bGV0IGxpbmUgPSB7fTtcblx0XHRcdGxjc3YubWFwKCh4LGkpID0+IGxpbmVbbGVnZW5kW2ldXT14KTtcblx0XHRcdHJzbC5wdXNoKGxpbmUpO1xuXHRcdH0pXG5cdFx0Lm9uKFwiZW5kXCIsIGZ1bmN0aW9uKCkge1xuXHRcdFx0cmVzb2x2ZShyc2wpO1xuXHRcdH0pXG5cdH0pXG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuXHRnZXRMZWdlbmQsXG5cdGdldERhdGFcbn1cbiJdfQ==",
    "map": {
      "version": 3,
      "sources": [
        "index.js"
      ],
      "names": [
        "fcsv",
        "require",
        "getLegend",
        "file",
        "Promise",
        "resolve",
        "reject",
        "parseFile",
        "path",
        "on",
        "lcsv",
        "destroy",
        "getData",
        "legend",
        "hasLegend",
        "rsl",
        "first",
        "line",
        "map",
        "x",
        "i",
        "push",
        "module",
        "exports"
      ],
      "mappings": "AAAA,MAAMA,IAAI,GAAGC,OAAO,CAAC,UAAD,CAApB;AAEA;;;;;;;AAKA,MAAMC,SAAS,GAAG,gBAAgBC,IAAhB,EAAsB;AACvC,SAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACvCN,IAAAA,IAAI,CAACO,SAAL,CAAeJ,IAAI,CAACK,IAApB,EACCC,EADD,CACI,MADJ,EACY,UAASC,IAAT,EAAe;AAC1BL,MAAAA,OAAO,CAACK,IAAD,CAAP;AACA,WAAKC,OAAL;AACA,KAJD;AAKA,GANM,CAAP;AAOA,CARD;AAUA;;;;;;;;;AAOA,MAAMC,OAAO,GAAG,gBAAgBT,IAAhB,EAAqBU,MAArB,EAA4BC,SAA5B,EAAuC;AACtD,SAAO,IAAIV,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACvC,QAAIS,GAAG,GAAG,EAAV;AAAA,QAAaC,KAAK,GAAC,IAAnB;AACAhB,IAAAA,IAAI,CAACO,SAAL,CAAeJ,IAAI,CAACK,IAApB,EACCC,EADD,CACI,MADJ,EACY,UAASC,IAAT,EAAe;AAC1B,UAAGM,KAAK,IAAIF,SAAZ,EAAuB;AACtBE,QAAAA,KAAK,GAAC,KAAN;AACA;AACA;;AACD,UAAIC,IAAI,GAAG,EAAX;AACAP,MAAAA,IAAI,CAACQ,GAAL,CAAS,CAACC,CAAD,EAAGC,CAAH,KAASH,IAAI,CAACJ,MAAM,CAACO,CAAD,CAAP,CAAJ,GAAgBD,CAAlC;AACAJ,MAAAA,GAAG,CAACM,IAAJ,CAASJ,IAAT;AACA,KATD,EAUCR,EAVD,CAUI,KAVJ,EAUW,YAAW;AACrBJ,MAAAA,OAAO,CAACU,GAAD,CAAP;AACA,KAZD;AAaA,GAfM,CAAP;AAgBA,CAjBD;;AAmBAO,MAAM,CAACC,OAAP,GAAiB;AAChBrB,EAAAA,SADgB;AAEhBU,EAAAA;AAFgB,CAAjB",
      "sourceRoot": "/home/rumarocket/eclipse-workspace/Informations/modules/csv",
      "sourcesContent": [
        "const fcsv = require(\"fast-csv\");\n\n/**\n * Get the legend of the csv file\n * @param File file the file with the legend\n * @return Array The array of the first line of the csv\n */\nconst getLegend = async function (file) {\n\treturn new Promise((resolve, reject) => {\n\t\tfcsv.parseFile(file.path)\n\t\t.on(\"data\", function(lcsv) {\n\t\t\tresolve(lcsv);\n\t\t\tthis.destroy();\n\t\t})\n\t})\n}\n\n/**\n * Get the data of the csv\n * @param File file the file that we wanna extract the data\n * @param Array legend the legend of the csv, gonna be use for creating the map of the data\n * @param Bolean hasLegend If true, we gonna skip the first line, if else we take everything\n * @return Array The data extract from the csv without or with the legend\n */\nconst getData = async function (file,legend,hasLegend) {\n\treturn new Promise((resolve, reject) => {\n\t\tlet rsl = [],first=true;\n\t\tfcsv.parseFile(file.path)\n\t\t.on(\"data\", function(lcsv) {\n\t\t\tif(first && hasLegend) {\n\t\t\t\tfirst=false\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tlet line = {};\n\t\t\tlcsv.map((x,i) => line[legend[i]]=x);\n\t\t\trsl.push(line);\n\t\t})\n\t\t.on(\"end\", function() {\n\t\t\tresolve(rsl);\n\t\t})\n\t})\n}\n\nmodule.exports = {\n\tgetLegend,\n\tgetData\n}\n"
      ]
    },
    "sourceType": "module",
    "mtime": 1572236056713
  }
}